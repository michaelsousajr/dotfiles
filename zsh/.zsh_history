l
gh repo create 
commit "init"
git push --set-upstream origin master
commit "init"
l
md Formula
l
cd Formula
l
l
vim makedir.rb
l
..
l
cd target
l
cd re
l
~
l
rmds
l
cd Developer
l
cd /Users/mikey/Developer/plugins/makedir
l
l
shasum -a 256 target/release/makedir
l
cd src
l
cp main.rs
re
cp main.rs
cb
tldr cb
cp main.rs | cb
l
cp main.rs | cb
l
l
cpfile main.rs
vim main.rs
l
shasum -a 256 target/release/makedir
..
l
...
l
cd /Users/mikey/Developer/plugins/makedir
l
shasum -a 256 target/release/makedir
l
cd Formula
l
vim makedir.rb
..
l
commit "add formula" 
brew tap michaelsousajr/makedir https://github.com/michaelsousajr/makedir
brew install makedir
https://github.com/michaelsousajr/makedir/releases
l
tar -czvf makedir-mac.tar.gz -C target/release makedir
l
open .
brew untap yourusername/makedir\
brew tap yourusername/makedir\
brew install makedir
brew untap michaelsousajr/makedir
brew tap michaelsousajr/makedir
vim
l
rm makedir-mac.tar.gz
l
brew untap michaelsousajr/makedir
brew tap-new michaelsousajr/makedir
l
brew install makedir
makedir test --git
makedir
brew tap michaelsousajr/makedir
brew install makedir
brew install homebrew-makedir
brew install makedir
l
cd target
l
cd re
l
shasum -a 256 makedir-mac.tar.gz
tar -czvf makedir-mac.tar.gz -C target/release makedir
tar -czvf makedir-mac.tar.gz -C makedir
l
shasum -a 256 makedir-mac.tar.gz
..
l
..
l
cd f
l
cd formula
l
vim makedir.rb
vim makedir.rb
l
brew untap michaelsousajr/makedir
brew tap-new michaelsousajr/makedir
brew tap michaelsousajr/makedir
brew install makedir
brew audit --strict --online makedir
brew ls
l
brew ls
l
l
vim makedir.rb
..
l
cargo build --release\
tar -czvf makedir-mac.tar.gz -C target/release makedir\
shasum -a 256 makedir-mac.tar.gz
cargo build --release
rm target/
l
l
rm makedir-mac.tar.gz
l
cargo build --release\
tar -czvf makedir-mac.tar.gz -C target/release makedir\
shasum -a 256 makedir-mac.tar.gz
l
cd fo
l
vim makedir.rb
..
l
cross build --release --target x86_64-unknown-linux-gnu\
tar -czvf makedir-linux.tar.gz -C target/x86_64-unknown-linux-gnu/release makedir\
shasum -a 256 makedir-linux.tar.gz
;
l
cd fo
l
vim makedir.rb
shasum -a 256 makedir-mac.tar.gz\
shasum -a 256 makedir-linux.tar.gz
l
..
l
shasum -a 256 makedir-mac.tar.gz\
shasum -a 256 makedir-linux.tar.gz
l
cd Formula
l
vim makedir.rb
..
l
rm makedir-linux.tar.gz
commit "update"
brew untap michaelsousajr/makedir\
brew tap michaelsousajr/makedir\
brew install makedir
l
rm makedir-mac.tar.gz
l
rm target/
l
cp Formula/
l
cp Formula
zshconfig
re
l
cp formula
l
rm Formula/
l
..
l
l
mkdir homebrew-makedir
l
cd homebrew-makedir
l
l
../makedir
cd ../makedir
l
cargo build --release
l
commit "making sep repo for formula"
l
cd target/release
l
open .
l
...
l
..
l
cd homebrew-makedir
l
ps
l
ps Formula
l
..
l
l
open homebrew-makedir/
l
cd homebrew-makedir
l
cd f
l
cd formula
r
cd formula
cd ../developer/plugins/homebrew-makedir
l
cd Formula
l
vim makedir.rb
l
vim makedir.rb
l
l
vim makedir.rb
..
l
git init
l
git add . && git commit -m "initial commit"
l
gh create repo
l
gh create repo
gh repo create 
l
commit "init"
l
...
l
brew tap michaelsousajr/makedir https://github.com/michaelsousajr/homebrew-makedir
l
brew install makedir
makedir 
l
makedir _ --git
l
cd _
l
..
l
rm _
l
l
cd plugins
l
cd makedir
l
cd src
l
cp main.rs
q chat
re
l
makedir
l
makedir --mitlic
l
rm --mitlic/
l
l
rm --mitlic/
l
open .
l
makedir test --git
l
cd test
l
..
l
rm test
l
vim main.rs
l
makedir --git
l
rm "--git"
l
rm --git
l
open .
makedir test --git
cd makedir
l
..
l
cd makedir
l
cd src
l
cd test
l
cargo init 
l
..
l
rm test
l
makedir test1 --git --cargo
l
cd test
cd test1
l
..
l
l
rm test1
l
rm .DS_Store
l
..
l
rm .DS_Store
l
cat .git
cat .gitignore
cat Cargo.toml
l
cat Cargo.lock
commit "changes"
l
commit "changes"
l
cd target
l
rm .DS_Store
l
cd debug
l
cd deps
l
..
l
..
l
cd release
l
..
l
..
l
..
l
cd homebrew-makedir
l
cd Formula
l
vim makedir.rb
..
l
..
l
cd makedir
l
makedir .github/workflows
l
cd .github
l
cd workflows
l
vim release.yaml
l
vim release.yml
l
..
l
..
l
vim .gitignore
l
hash
hash256
sha256
l
openssl rand -base64 32
commit "key"
l
git tag v0.1.1
git push origin v0.1.1
git tag v0.1.2
git push origin v0.1.2
brew upgrade makedir
brew update makedir
l
..
l
cd homebrew-makedir
l
cd Formula
;
l
vim makedir.rb
cd ../makedir
l
..
l
..
l
cd makedir
l
cd .githuib
l
cd .github
l
cd workflows
l
vim release.yml
..
l
..
l
git tag v0.1.5\
git push origin v0.1.5
brew upgrade makedir
l
makedir test --git
l
commit "test"
l
git status
zshconfig
re
l
commit test
l
commit "test"
l
zshconfig
re
l
cd test
l
touch test
l
..
l
git add .
rm test
l
makedir test
l
cd test
l
touch test
l
..
l
commit "test"
l
..
l
cd home
l
cd Formula
l
vim makedir.rb
l
..
l
..
l
cd makedir
l
rm test
l
commit "rm test"
l
brew upgrade makedir
brew tap michaelsousajr/makedir
l
makedir --version
brew makedir --version
brew ls
l
open .
l
brew info makedir
brew untap michaelsousajr/makedir\
brew tap michaelsousajr/makedir\
brew upgrade makedir
brew uninstall makedir
brew untap michaelsousajr/makedir\
brew tap michaelsousajr/makedir\
brew upgrade makedir
makedir
brew install makedir
brew untap michaelsousajr/makedir\
brew tap michaelsousajr/makedir\
brew upgrade makedir
l
makedir
l
..
l
where taps
fd taps
f
/
f
f
opt/homebrew/Library/Taps/
cd opt/homebrew
l
cd opt
l
cd sketchybar
l
..
l
..
l
~
l
cd dev
l
cd config
l
cd raycast
l
vim config.json
cd extensions
l
..
l
open .
l
..
l
~
l
rmds
l
ll
l
i
o
[
p
q
l
zshconfig
re
md test/test1/test2
l
cd test
l
..
l
rm test
l
makedir
makedir
makedir   
makedir  
l
l
makedir
cd makedir
k
l
cd src
l
vim main.rs
makedir
cd makedir
l
cd src
l
vim main.rs
git status
vim main.rs
l
..
l
rm target
l
cargo build --release
l
cd target
l
cd release
l
./makedir
./makedir testfl --git --mitlicense --readme --cd
./makedir testfl --git --mitlicense --readme \

l
cd testfl
;l
cat README.md
cat LICENSE.txt
l
..
l
rm testfl/
l
..
l
..
l
rm target
l
cd src
l
vim main.rs
l
..
l
cargo build --release
l
cd target/
l
cd releaes
l
cd release
l
./makedir
./makedir testfl --cd --mit
...
l
cd src
l
vim main.rs
vim main.rs
l
touch README.md LICENSE USAGE.txt
l
vim readme.md
vim main.rs
l
re
l
l
vim LICENSE
vim README.md
vim usage.txt
l
vim main.rs
l
..
l
rm target
l
cargo build -r
cd target/release
l
./makedir
./makedir test --readme
l
cd test
l
cat README.md
vim README.md
glow README.md
;
l
md test
l
cd test
l
l
npx init
npx vite
npx tailwindcss
l
..
l
rm test
l
md test/test1/test2 --git 
l
cd test
l
cd test1
l
cd test2
l
....
l
rm test
l
1
2
3
cd release
l
...
l
cd src
l
vim main.rs
~
l
fd michaelsousajr
f
cd dev
l
f
cd michaelsousajr
l
cd apps
l
mv michaelsousajr/ soup-ms
l
cd soup-ms
l
vim README.md
\:q
l
cd src
l
mv USAGE.txt usage.txt
l
tre
tree
l
vim utils.rs
vim main.rs
l
..
l
cargo build --release
l
cd target/release
l
./makedir
...
l
cd src
l
vim main.rs
..
l
cargo build --release
cd target/release
l
./makedir
...
l
cd src
l
..
l
rm target\

l
cd src
l
mv usage.txt usage.txt
l
..
l
cargo build --release
cd target/release
l
./makedir
...
l
rm target
l
cd src
l
vim main.rs
..
l
cargo build --release
l
cd target/release
l
./makedir
...
l
cd src
l
vim main.rs
..
l
cd src
l
rm LICENSE README.md usage.txt utils.rs
l
..
l
cargo tree
cargo build -r
cargo run
cargo run makedir testing --mit --git --bun --deno --readme
l
cd makedir
l
cat LICENSE
..
l
rm ./makedir
l
rm target
l
cd src
l
vim main.rs
vim text.txt
l
prettier
brew ls
l
rustfmt text.txt
rustfmt main.rs
l
cat main.rs
l
brew install prettier
prettier
tldr prettier
cb
prettier text.txt
prettier text.txt
brew uninstall prettier
l
l
vim text.txt
vim text.txt
l
vim text.txt
vim main.rs
vim main.rs
l
rm text.txt
l
..
l
rm target
l
cargo build -r
cd target/release
l
./makedir 
l
...
l
rm target
l
cd sr
l
vim main.rs
vim main.rs
vim main.rs
..
l
cargo build -r
cd release
l
./makedir
l
...
l
cd src
l
vim main.rs
l
..
l
cargo build -r
l
cd src
l
vim main.rs
..
l
cargo build -r
l
cd release
l
./makedir
l
./makedir test1 --readme --mit
l
cd test
cd test1
l
cat LICENSE
cat README.md
cat LICENSE
vim LICENSE
..
l
..
l
..
l
rm target
l
vim src
cargo build -r
l
cd release
l
./makedir
./makedir test1 --readme --mit
./makedir
...
l
rm target
l
cargo build -r
cd release
l
./makedir
l
./makedir test1 --readme --mit --bun --cargo
l
cd test1
l
cat LICENSE
vim LICENSE
l
cat LICENSE
./makedir
l
vim index.ts
vim README.md
l
..
l
./makedir
makedir
./makedir
l
./makedir test1 test2
l
cd test1
l
..
l
rm test1
l
./makedir test1 test2
l
cd tes1
l
cd test1
l
..
l
rm test1
l
...
l
l
l
rm target
l
cd src
l
vim main.rs
l
..
l
rm target
l
cargo build -r
l
cd release
l
./makedir
./makedir backuptest multi --backup --init
l
cd backuptest
l
cat README.md
..
l
cd multi
l
..
l
rm multi/
l
rm backuptest/
l
./makedir
./makedir testedit --open
l
rm testedit/
l
./makedir
./makedir testopen --cd
l
./makedir te/st --cd
l
rm te testopen
l
./makedir
l
...
l
l
cd makedir
l
rm target && cargo build -r
î‚¶Êƒµâƒ¬ƒ°âƒ¶ƒ€á´¥âƒ¶ƒ€Êƒ´âƒªƒ£î‚´ rm target && cargo build -r\
   Compiling makedir v0.1.0 (/Users/mikey/Developer/plugins/makedir)\
error[E0268]: `continue` outside of a loop\
  --> src/main.rs:34:9\
   |\
34 |         continue;\
   |         ^^^^^^^^ cannot `continue` outside of a loop\
\
For more information about this error, try `rustc --explain E0268`.\
error: could not compile `makedir` (bin "makedir") due to 1 previous error
l
rm target
git config --global user.email
git config --global user.email "michaelsousajr@gmail.com"
git config --global user.email
l
cdd
l
src
cd src
l
vim main.rs
c
l
..
l
cargo b -r && cargo run
cd src
l
vim main.rs
..
l
cargo b -r && cargo run
l
q
q chat
q restart
q chat
l
cd src
l
cb < main.rs
use std::env;\
use std::fs;\
use std::path::Path;\
use std::process::Command;\
\
fn main() {\
    let args: Vec<String> = env::args().collect();\
\
    if args.len() < 2 {\
        let usage_message = "\\
    \x1b[1;33mUsage:\x1b[0m makedir [directories] [options]\
\
    \x1b[1;33mHelp:\x1b[0m  Creates one or more directories with optional project initialization.\
        Multiple directories can be specified, and options apply to all of them.\
\
    \x1b[1;33mOptions:\x1b[0m\
    \x1b[32m--git,    -g\x1b[0m           Initialize a Git repository.\
    \x1b[32m--readme, -r\x1b[0m           Generate a README.md file.\
    \x1b[32m--mit,    -m\x1b[0m           Generate an MIT License file.\
    \x1b[32m--cargo,  -c\x1b[0m           Initialize a Rust Cargo project.\
    \x1b[32m--npm,    -n\x1b[0m           Initialize an npm project (package.json).\
    \x1b[32m--bun,    -b\x1b[0m           Initialize a Bun project.\
    \x1b[32m--yarn,   -y\x1b[0m           Initialize a Yarn project.\
    \x1b[32m--pnpm,   -p\x1b[0m           Initialize a pnpm project.\
    \x1b[32m--deno,   -d\x1b[0m           Initialize a Deno project (deno.json).\
";\
        eprintln!("{}", usage_message);\
        std::process::exit(1);\
    }\
\
    // Separate directory names from flags\
    let mut dirs: Vec<String> = Vec::new();\
    let mut flags: Vec<String> = Vec::new();\
    for arg in args.iter().skip(1) {\
        if arg.starts_with("--") {\
            flags.push(arg.clone());\
        } else {\
            dirs.push(arg.clone());\
        }\
    }\
\
    if dirs.is_empty() {\
        eprintln!("\x1b[1;33mNo directories provided.\x1b[0m");\
        std::process::exit(1);\
    }\
\
    // Process each directory\
    for dir in dirs {\
        if let Err(e) = fs::create_dir_all(&dir) {\
            eprintln!("\x1b[1;33mFailed to create directory {}:\x1b[0m {}", dir, e);\
            continue;\
        } else {\
            match std::fs::canonicalize(&dir) {\
                Ok(full_path) => println!(\
                    "\x1b[1;33mCreated directory:\x1b[0m {}",\
                    full_path.display()\
                ),\
                Err(_) => println!("\x1b[1;33mCreated directory:\x1b[0m {}", dir),\
            }\
        }\
\
        let dir_path = Path::new(&dir);\
\
        // Helper to run commands within a directory\
        let run_command = |cmd: &str| {\
            let output = Command::new("sh")\
                .arg("-c")\
                .arg(cmd)\
                .current_dir(dir_path)\
                .output();\
\
            if let Ok(output) = output {\
                if !output.status.success() {\
                    eprintln!("\x1b[1;33mFailed to execute:\x1b[0m {} in {}", cmd, dir);\
                } else {\
                    eprintln!("\x1b[1;33mError running:\x1b[0m {} in {}", cmd, dir);\
                }\
            }\
        };\
\
        // Process each flag for the current directory\
        for flag in &flags {\
            match flag.as_str() {\
                "--git" | "-g" => run_command("git init"),\
                "--npm" | "-n" => run_command("npm init -y"),\
                "--bun" | "-b" => run_command("bun init"),\
                "--yarn" | "-y" => run_command("yarn init -y"),\
                "--pnpm" | "-p" => run_command("pnpm init"),\
                "--cargo" | "-c" => run_command("cargo init"),\
                "--deno" | "-d" => {\
                    if let Err(e) = fs::write(\
                        dir_path.join("deno.json"),\
                        "{\n  \"importMap\": \"./import_map.json\"\n}",\
                    ) {\
                        eprintln!(\
                            "\x1b[1;33mFailed to create deno.json in {}:\x1b[0m {}",\
                            dir, e\
                        );\
                    }\
                }\
                "--readme" | "-r" => {\
                    let readme_content = format!(\
                        "# Project Title\n\n\\
                        Simple overview of use/purpose.\n\n\\
                        ## Description\n\n\\
                        An in-depth paragraph about your project and overview of use.\n\n\\
                        ## Getting Started\n\n\\
                        ### Dependencies\n\n\\
                        * Describe any prerequisites, libraries, OS version, etc., needed before installing program.\n\\
                        * ex. Windows 10\n\n\\
                        ### Installing\n\n\\
                        * How/where to download your program\n\\
                        * Any modifications needed to be made to files/folders\n\n\\
                        ### Executing program\n\n\\
                        * How to run the program\n\\
                        * Step-by-step bullets\n\\
                        ```bash\n\\
                        code blocks for commands\n\\
                        ```\n\n\\
                        ## Help\n\n\\
                        Any advice for common problems or issues.\n\\
                        ```bash\n\\
                        command to run if program contains helper info\n\\
                        ```\n\n\\
                        ## Authors\n\n\\
                        Contributors names and contact info\n\\
                        ex. [@soup-ms](https://github.com/soup-ms)\n\n\\
                        ## Version History\n\n\\
                        * v0.2.0\n\\
                            * Various bug fixes and optimizations\n\\
                            * See [commit change]() or See [release history]()\n\\
                        * v0.1.0\n\\
                            * Initial Release\n\n\\
                        ## License\n\n\\
                        This project is licensed under the [NAME HERE] License - see the LICENSE.md file for details\n\n\\
                        ## Acknowledgments\n\\
                        https://twitter.com/dompizzie\n"\
                    );\
\
                    if let Err(e) = fs::write(dir_path.join("README.md"), readme_content) {\
                        eprintln!(\
                            "\x1b[1;33mFailed to create README.md in {}:\x1b[0m {}",\
                            dir, e\
                        );\
                    }\
                }\
                "--license" | "-l" => {\
                    let license_content = format!(\
                        "MIT License\n\n\\
                        Copyright (c) [YEAR] [YOUR NAME]\n\n\\
                        Permission is hereby granted, free of charge, to any person obtaining a copy\n\\
                        of this software and associated documentation files (the \"Software\"), to deal\n\\
                        in the Software without restriction, including without limitation the rights\n\\
                        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\\
                        copies of the Software, and to permit persons to whom the Software is\n\\
                        furnished to do so, subject to the following conditions:\n\n\\
                        The above copyright notice and this permission notice shall be included in all\n\\
                        copies or substantial portions of the Software.\n\n\\
                        THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\\
                        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\\
                        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\\
                        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\\
                        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\\
                        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\\
                        SOFTWARE.\n"\
                    );\
\
                    if let Err(e) = fs::write(dir_path.join("LICENSE"), license_content) {\
                        eprintln!(\
                            "\x1b[1;33mFailed to create LICENSE file in {}:\x1b[0m {}",\
                            dir, e\
                        );\
                    }\
                }\
                _ => eprintln!("\x1b[1;33mUnknown flag:\x1b[0m {}", flag),\
            }\
        }\
    }\
}\

l
zshconfig
zshconfug
zshconfig
l
cpc main.rs
re
cpc main.rs
l
cpc main.rs
zshconfig
cb > main.rs
cb < main.rs
l
re
zshconfig
re
l
c
cpc main.rs
l
alias cp='cb copy'\

zshconfi
zshconfig
cb < main.rs
cb
cb 0
cb rm 0
tldr cb
l
..
l
vim src
zshconfig
re
cdd
~
l
cdd
cdd
cd developer/scripts
l
cdd
l
zshconfig
re
cdd
l
zshconfig
re
l
~
l
vim
l
cd homebrew-makedir
l
cd formula
l
vim makedir.rb
q chatr
q chat
l
rm tests.rs
l
..
l
cd formula
l
l
vim makedir.rb
q chat
l
l
cd makedir
l
vim
l
cat .gitignore
vim Cargo.toml
q chat
l
cd src
l
vim readme_template.md
vim license_template.txt
vim dockerfile_template.txt
vim readme_template.md
vim license_template.txt
l
vim main.rs
l
..
l
rm target
l
cargo b -r
l
cd releasel
cd release
l
./makedir
./makedir test1 -l -r -do
l
cd test1
l
cat Dockerfile
l
..
l
cd test1
l
cat LICENSE
l
cat README.md
..
l
rm test1
l
...
l
l
q caht
q chat
q chat
l
rm target
l
cargo build -r
q chat
l
vim main.rs
q chat
l
cd makedir
l
cd src
l
touch main.rs.bak
l
cp main.rs main.rs.bak
l
cp main.rs > main.rs.bak
l
cat main.rs
l
cat main.rs.bak
vim main.rs
vim main.rs.bak
l
..
l
vim Cargo.toml
cd src
l
vim main.rs
vim main.rs
l
touch dockerfile_template.txt readme_template.md license_template.txt
l
l
vim main.rs.bak
..
l
cd release
l
./makedir . -l
l
rm LICENSE
l
./makedir ./release -l
l
cd release
l
rm LICENSE
l
..
l
rm release/
l
...
l
cd src
l
vim main.rs
l
vim main.rs
..
l
cd tests
l
mv makedir_tests.rs mdtest.rs
l
..
l
cd tests
l
mv mdtest.rs makedir_tests.rs.bak
l
..
l
cd src
l
vim main.rs
..
l
l
rm main.rs
l
cd src
l
vim main.rs
q chat
l
..
l
git restore .
l
cd src
l
..
l
git clean -fd\
git restore .
l
cd src
l
vim main.rs
..
l
git status
l
rm target
l
cd src
l
vim main.rs
zshconfig
l
